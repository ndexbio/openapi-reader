{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "2.3.0",
    "title" : "NDEx 2.3 REST API",
    "description" : "This [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) document defines the **N**etwork **D**ata **Ex**change (**NDEx**) REST API which is used to communicate with NDEx public and private servers.\n\nThis document and all references to the NDEx REST API, source code and ancillary documentation are copyrighted: *Â© 2013-2018, The Regents of the University of California, The Cytoscape Consortium.  All rights reserved.*  Please abide with the [Terms of Use, Licensing and Sources](http://www.home.ndexbio.org/disclaimer-license/). Likewise, the [Swagger-UI](https://github.com/swagger-api/swagger-ui) document reader that displays this OpenAPI document is copyrighted by *Smartbear Software*. Its open-source software license is found [here](https://github.com/swagger-api/swagger-ui/blob/master/LICENSE).  \n    \n\nGoogle's OAuth login and the following API endpoints are not currently supported.  They will be added when the Swagger-UI document reader permits.\n\n  - `Post: /network`\n  - `Put:  /network/{networkid}`\n  \n\nBasic Authentication and all other API endpoints are supported.  View or download the full NDEx API using the link below.\n"
  },
  "externalDocs" : {
    "description" : "NDEx API document",
    "url" : "http://www.home.ndexbio.org/using-the-ndex-server-api/"
  },
  "servers" : [ {
    "url" : "http://www.ndexbio.org/v2",
    "description" : "NDEx public server"
  }, {
    "url" : "http://{Host}/{Version}",
    "description" : "The host server URL and API version can be overridden.\n",
    "variables" : {
      "Host" : {
        "default" : "www.ndexbio.org"
      },
      "Version" : {
        "description" : "API version",
        "enum" : [ "v2", "rest" ],
        "default" : "v2"
      }
    }
  } ],
  "tags" : [ {
    "name" : "Admin"
  }, {
    "name" : "Batch"
  }, {
    "name" : "Group"
  }, {
    "name" : "Network"
  }, {
    "name" : "Network Set"
  }, {
    "name" : "Search"
  }, {
    "name" : "Task"
  }, {
    "name" : "User"
  } ],
  "paths" : {
    "/admin/status" : {
      "get" : {
        "tags" : [ "Admin" ],
        "summary" : "Get Server Status",
        "description" : "- Get the current operational status of an NDEx server. \n- Use this function to check if the NDEx server is running or stopped, as well as list important server properties.\n- The `format` query parameter determines what properties are listed by this operation.\n",
        "security" : [ ],
        "parameters" : [ {
          "in" : "query",
          "name" : "format",
          "description" : "Determines the server information to be returned.\n  * **standard** - returns properties such as server version and build. The *AdminStatusStandardSchema* Model is returned.\n  * **full** - returns standard properties as well as additional properties.  The *AdminStatusFullSchema* Model is returned.\n",
          "schema" : {
            "type" : "string",
            "enum" : [ "standard", "full" ]
          },
          "required" : false,
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/AdminStatusStandardSchema"
                  }, {
                    "$ref" : "#/components/schemas/AdminStatusFullSchema"
                  } ]
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/batch/group" : {
      "post" : {
        "summary" : "Get Groups by UUIDs",
        "description" : "- Returns a JSON array of Group objects. \n- The HTTP request body contains a JSON array of UUIDs which identify which Group objects to fetch.\n",
        "security" : [ ],
        "tags" : [ "Batch" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "description" : "List of Group UUIDs",
                "items" : {
                  "type" : "string",
                  "description" : "Group UUID",
                  "format" : "uuid",
                  "example" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "description" : "List of Group objects",
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GroupObjectSchema"
                  }
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/batch/network/export" : {
      "post" : {
        "summary" : "Export Networks",
        "description" : "- Creates network export tasks for the set of networks specified by the `networkids` property in the network export request body.\n- The format which to export is specified using the `exportFormat` property in the request body.\n- The /admin/status?format=full function can be used to get a complete list of importers/exporters the server supports.\"\n- Returns a JSON object which maps Network UUIDs to ExportTaskIDs.  The taskId can then be used to download the exported file.  Refer to the *Download Exported File by Task UUID* operation.\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Batch" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "exportFormat" : {
                    "type" : "string",
                    "description" : "The format is not limited to CX network formats; it can potentially include other formats derived from the stored network such as gene lists in GSEA format.",
                    "example" : "GSEA Gene Set"
                  },
                  "networkIds" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string",
                      "format" : "uuid",
                      "description" : "A list of network UUIDs. An example network UUID is entered for demonstration purposes. It can be replaced with one or more  network UUIDs, as needed.",
                      "example" : "cac8ec21-2d32-11e8-b939-0ac135e8bacf"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/batch/network/permission" : {
      "post" : {
        "summary" : "Get Network Permissions by UUIDs",
        "description" : "- Returns what permissions the authenticated user has on the given network.\n- The response payload is a JSON map in which the keys are network UUIDs and the corresponding values are the highest permission assigned to the authenticated user.\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Batch" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "description" : "Network UUIDs",
                "items" : {
                  "type" : "string",
                  "format" : "uuid",
                  "description" : "A list of network UUIDs. An example network UUID is entered for demonstration purposes. It can be replaced with one or more  network UUIDs, as needed.",
                  "example" : "2cda23a9-1e5f-11e8-b939-0ac135e8bacf"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "The keys are network UUIDs and the their values are the highest permission assigned to the authenticated user.\n"
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/batch/network/summary" : {
      "post" : {
        "summary" : "Get Network Summaries of UUIDs",
        "description" : "- Returns a JSON array of Network Summary objects. \n- The HTTP request body contains a JSON array of UUIDs which identify which Network Summary objects to fetch.\n- This function only returns summaries for public networks if the user is not authenticated, otherwise it returns public and the networks for which the authenticated user has READ permission.\n- The number of POSTed Network UUIDs is limited to 2000.\n",
        "security" : [ { }, {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Batch" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/AccessKeyValueParam"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "description" : "List of Network Summary UUIDs",
                "items" : {
                  "type" : "string",
                  "format" : "uuid",
                  "description" : "A list of network UUIDs. An example network UUID is entered for demonstration purposes. It can be replaced with one or more  network UUIDs, as needed.",
                  "example" : "cac8ec21-2d32-11e8-b939-0ac135e8bacf"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "description" : "List of Network Summary objects",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkSummaryObjectSchema"
                  }
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/batch/user" : {
      "post" : {
        "summary" : "Get Users by UUIDs",
        "description" : "- Returns a JSON array of User objects. \n- The HTTP request body contains a JSON array of UUIDs which identify which User objects to fetch.\n",
        "security" : [ ],
        "tags" : [ "Batch" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "description" : "List of User UUIDs",
                "items" : {
                  "type" : "string",
                  "description" : "User UUID",
                  "format" : "uuid",
                  "example" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "description" : "List of User objects",
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserObjectSchema"
                  }
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/group" : {
      "post" : {
        "summary" : "Create a Group",
        "description" : "- Creates a new group owned by the authenticated user.\n- The following properties can be set for the new group\n  - `groupName`\n  - `image`\n  - `website`\n  - `description`\n- A URL link associated with the newly created group is returned in the response body upon successful completion. \n- The group's UUID is a component of this URL and corresponds to the **groupid** parameter used in subsequent Get/Put/Delete group operations.\n- Returns an error if\n  - the `groupName` property is not specified or already in use\n  - the user is not authenticated\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Group" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "description" : "Group object",
                "properties" : {
                  "properties" : {
                    "type" : "object"
                  },
                  "groupName" : {
                    "type" : "string"
                  },
                  "image" : {
                    "type" : "string",
                    "format" : "url",
                    "nullable" : true,
                    "default" : null
                  },
                  "website" : {
                    "type" : "string",
                    "format" : "url",
                    "nullable" : true,
                    "default" : null
                  },
                  "description" : {
                    "type" : "string",
                    "nullable" : true,
                    "default" : null
                  }
                },
                "required" : [ "groupName" ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "description" : "URL of newly created group",
                  "type" : "string",
                  "format" : "url",
                  "example" : "http://test.ndexbio.org/v2/group/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/group/{groupid}" : {
      "get" : {
        "summary" : "Get a Group",
        "description" : "- Retrieves the group specified by **groupid** (i.e. Group UUID).\n- Returns an error if the group is not found.\n",
        "security" : [ ],
        "tags" : [ "Group" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/GroupIdPath"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupObjectSchema"
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      },
      "put" : {
        "summary" : "Update a Group",
        "description" : "- Updates the group metadata associated with the **groupid** path parameter.\n- Returns an error if:\n  - the group is not found\n  - the user is not the owner of the network set\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Group" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/GroupIdPath"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "description" : "Group object",
                "properties" : {
                  "properties" : {
                    "type" : "object"
                  },
                  "groupName" : {
                    "type" : "string"
                  },
                  "image" : {
                    "type" : "string",
                    "format" : "url",
                    "nullable" : true,
                    "default" : null
                  },
                  "website" : {
                    "type" : "string",
                    "format" : "url",
                    "nullable" : true,
                    "default" : null
                  },
                  "description" : {
                    "type" : "string",
                    "nullable" : true,
                    "default" : null
                  }
                },
                "required" : [ "groupName" ]
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      },
      "delete" : {
        "summary" : "Delete a Group",
        "description" : "- Deletes the group specified by the **groupid** path parameter.\n- Returns an error if:\n  - the roup is not found\n  - the authenticated user does not have authorization to delete the group\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Group" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/GroupIdPath"
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/group/{groupid}/membership" : {
      "get" : {
        "summary" : "Get Members of a Group",
        "description" : "- Retrieves members of the group associated with the **groupid** path parameter.\n- The **type** query parameter can filter which membership types are returned.  All membership types are returned if this query param is omitted.\n",
        "security" : [ { }, {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Group" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/GroupIdPath"
        }, {
          "in" : "query",
          "name" : "type",
          "schema" : {
            "type" : "string",
            "enum" : [ "GROUPADMIN", "MEMBER" ]
          },
          "required" : false
        }, {
          "$ref" : "#/components/parameters/StartParam"
        }, {
          "$ref" : "#/components/parameters/SizeParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "permissions" : {
                        "type" : "string",
                        "description" : "User's membership type - either \"GROUPADMIN\" or \"MEMBER\"\n"
                      },
                      "resourceUUID" : {
                        "type" : "string",
                        "format" : "uuid"
                      },
                      "membershipType" : {
                        "type" : "string",
                        "description" : "expected value is \"Group\""
                      },
                      "memberAccountName" : {
                        "type" : "string",
                        "description" : "userName of the member"
                      },
                      "memberUUID" : {
                        "type" : "string",
                        "format" : "uuid"
                      },
                      "resourceName" : {
                        "type" : "string",
                        "description" : "the group's name"
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      },
      "put" : {
        "summary" : "Add or Update a Group Member",
        "description" : "- Updates the group membership associated with the **groupid** path parameter.\n- An error is returned if:\n  - any path or query parameter is omitted\n  - the authenticated user does not have Admin permissions for the group\n  - the change would leave the group without an Admin member\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Group" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/GroupIdPath"
        }, {
          "$ref" : "#/components/parameters/UserIdParam"
        }, {
          "$ref" : "#/components/parameters/GroupMembershipTypeParam",
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      },
      "delete" : {
        "summary" : "Remove a Group Member",
        "description" : "- Removes the group member associated with the **userid** query parameter.\n- An error is returned if:\n  - the group does not exist\n  - the authenticated user is not authorized to edit this group\n  - removing the member would leave the group without an Admin member\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Group" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/GroupIdPath"
        }, {
          "$ref" : "#/components/parameters/UserIdParam"
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/group/{groupid}/permission" : {
      "get" : {
        "summary" : "Get Permissions (Two Options)",
        "description" : "Option 1 - Get Group Permission for a Specific Network\n- Using the **networkId=** query parameter:\n  - Returns the explicit permission the specified **groupid** has on the specified **networkid**, which is either READ or WRITE.\n  - Authentication is manditory to ensure only members of a group can obtain group-network permissions.\n---\nOption 2 - Get Network Permissions of a Group\n- Using **permission=**, **start=** and **size=** query parameters:\n  - Returns network permissions for the specified group.\n  - The returned JSON object contains key/value pairs,where the key is the network UUID and the value is the corresponding permission.\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Group" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "groupid",
          "description" : "(Manditory for Both Options) The Group object UUID",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          },
          "required" : true,
          "example" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }, {
          "in" : "query",
          "name" : "networkid",
          "description" : "(Option 1 only) network UUID to fetch",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          },
          "required" : false,
          "example" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }, {
          "in" : "query",
          "name" : "permission",
          "description" : "(Option 2 only) 'READ' or 'WRITE' required",
          "schema" : {
            "type" : "string",
            "enum" : [ "READ", "WRITE" ]
          },
          "required" : false
        }, {
          "in" : "query",
          "name" : "start",
          "description" : "(Option 2 only) Index to first object to return",
          "schema" : {
            "type" : "number",
            "default" : 100
          },
          "required" : false
        }, {
          "in" : "query",
          "name" : "size",
          "description" : "(Option 2 only) Number of objects to return",
          "schema" : {
            "type" : "number",
            "default" : 100
          },
          "required" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/network/{networkid}" : {
      "get" : {
        "summary" : "Get Complete Network in CX Format",
        "description" : "- Returns the specified network as CX.  \n- This is performed as a monolithic operation, so it is advisable for applications to first use the **getNetworkSummary** method to check the node and edge counts for a network before retrieving the network.\n",
        "security" : [ { }, {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdDemoPath"
        }, {
          "$ref" : "#/components/parameters/AccessKeyValueParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CX_NetworkStreamSchema"
                }
              }
            }
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      },
      "delete" : {
        "summary" : "Delete a network",
        "description" : "- Deletes the network specified by networkid. \n- There is no method to undo a deletion, so care should be exercised.  \n- The specified network must be owned by the authenticated user.\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdPath"
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/network/{networkid}/accesskey" : {
      "get" : {
        "summary" : "Get Access Key of Network",
        "description" : "- Returns an access key to the user.  This access key will allow any user to have read access to this network regardless if that user has READ permissions on this network.\n- If the access key is not enabled, a status code of 204 (no payload content) is returned.\n- Errors if:\n  - The caller is not the owner of this network.\n  - the **networkid** does not correspond to an existing network\n  ---\n**Note: The access key function must be enabled in order to return a key.** Refer to *Disable/enable Access Key on Network* operation.\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdPath"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "Returned access key",
                  "properties" : {
                    "accesskey" : {
                      "description" : "access key value",
                      "type" : "string",
                      "format" : "uuid"
                    }
                  }
                }
              }
            }
          },
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      },
      "put" : {
        "summary" : "Disable/Enable Access Key on Network",
        "description" : "- This operations turns the access key on and off.\n- Returns an access key when query parameter `action=enable`.\n- Returns a status code of 204 (no payload content) when query parameter `action=disable`.\n- Errors if:\n  - The caller is not the owner of this network.\n  - the **networkid** does not correspond to an existing network\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdPath"
        }, {
          "$ref" : "#/components/parameters/AccessKeyParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "Returned access key",
                  "properties" : {
                    "accessKey" : {
                      "type" : "string",
                      "format" : "uuid"
                    }
                  }
                }
              }
            }
          },
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          }
        }
      }
    },
    "/network/{networkid}/aspect" : {
      "get" : {
        "summary" : "Get Network CX Metadata Collection",
        "description" : "- Returns the CX metadata collection of the network specified by **networkid**.\n- Errors if the **networkid** does not correspond to an existing network.\n",
        "security" : [ { }, {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdDemoPath"
        }, {
          "$ref" : "#/components/parameters/AccessKeyValueParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "Response payload object",
                  "properties" : {
                    "metaData" : {
                      "type" : "array",
                      "description" : "Array of Metadata Aspect objects",
                      "items" : {
                        "$ref" : "#/components/schemas/AspectMetadataSchema"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/network/{networkid}/aspect/{aspectName}" : {
      "get" : {
        "summary" : "Get Network Aspect as CX",
        "description" : "- Returns a JSON array of CX elements from the aspect specified by the  **aspectName** path parameter from the network specified by networkid.\n- The size parameter is optional, and by default the server will return all elements of this aspect.\n- Errors if the **networkid** does not correspond to an existing network\n",
        "security" : [ { }, {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdDemoPath"
        }, {
          "$ref" : "#/components/parameters/AspectNameDemoPath"
        }, {
          "$ref" : "#/components/parameters/SizeParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "description" : "List of CX element objects",
                  "items" : {
                    "type" : "object"
                  }
                }
              }
            }
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/network/{networkid}/aspect/{aspectName}/metadata" : {
      "get" : {
        "summary" : "Get Network Aspect Metadata",
        "description" : "- Returns the CX metadata for the specified aspect of the network specified by **networkid**.\n- Errors if the **networkid** does not correspond to an existing network\n",
        "security" : [ { }, {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdPath"
        }, {
          "$ref" : "#/components/parameters/AspectNamePath"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "elementCount" : {
                      "type" : "number"
                    },
                    "idCounter" : {
                      "type" : "number"
                    },
                    "lastUpdate" : {
                      "type" : "number"
                    },
                    "consistencyGroup" : {
                      "type" : "number"
                    },
                    "version" : {
                      "type" : "string"
                    },
                    "data" : {
                      "$ref" : "#/components/schemas/AspectMetadataSchema"
                    },
                    "name" : {
                      "type" : "string"
                    },
                    "properties" : {
                      "type" : "object"
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/network/{networkid}/aspects" : {
      "put" : {
        "summary" : "Update Network Aspects",
        "description" : "- Updates aspects of the network specified by **networkid**. \n- Put data contains a CX object which includes the specified aspects that will be used to overwrite or insert into the network.\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdPath"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/network/{networkid}/copy" : {
      "post" : {
        "summary" : "Clone a Network",
        "description" : "- Creates a clone of the network specified by networkid (UUID )into the signed in user's account. \n- The URL of the cloned network is returned to the client.\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdDemoPath"
        } ],
        "responses" : {
          "201" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "description" : "URL of newly created network set.",
                  "type" : "string",
                  "format" : "url",
                  "example" : "http://test.ndexbio.org/v2/network/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
              }
            }
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/network/{networkid}/profile" : {
      "put" : {
        "summary" : "Update Network Profile",
        "description" : "- Updates the profile information of the network specified by **networkid** based on a POSTed JSON object specifying the attributes to update.\n- Any profile attributes specified will be updated, but attributes that are not specified will have no effect - omission of an attribute does not mean deletion of that attribute.\n- The network profile attributes that are updated by this method are:\n  - `name`\n  - `description`\n  - `version`\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdPath"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "description" : "Network profile attributes",
                "properties" : {
                  "name" : {
                    "type" : "string"
                  },
                  "description" : {
                    "type" : "string"
                  },
                  "version" : {
                    "type" : "string"
                  }
                },
                "example" : {
                  "name" : "",
                  "description" : "",
                  "version" : ""
                }
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/network/{networkid}/properties" : {
      "put" : {
        "summary" : "Set Network Properties",
        "description" : "- Updates the **NetworkAttributes** aspect of the network specified by **networkid** based on the list of **NdexPropertyValuePair** objects in the PUT data.\n- Errors if:\n  - the authenticated user does not have ADMIN permission to the specified network\n  - the **networkid** does not correspond to an existing network\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdPath"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "subNetworkId" : {
                    "type" : "string"
                  },
                  "predicateString" : {
                    "type" : "string"
                  },
                  "dataType" : {
                    "type" : "string"
                  },
                  "value" : {
                    "type" : "string"
                  }
                },
                "example" : {
                  "subNetworkId" : "",
                  "predicateString" : "",
                  "dataType" : "",
                  "value" : ""
                }
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/network/{networkid}/provenance" : {
      "get" : {
        "summary" : "Get Network Provenance",
        "description" : "- Returns the Provenance aspect of the network specified by **networkid**.  \n- The returned value is a JSON *ProvenanceEntity* object which in turn contains a tree structure of *ProvenanceEvent* and *ProvenanceEntity* objects that describe the provenance history of the network.\n- Refer to the document [NDEx Provenance History](http://www.home.ndexbio.org/network-provenance-history/) for a detailed desciption of this structure and best practices for its use.\n- Errors if:\n  - the **networkid** does not correspond to an existing network\n",
        "security" : [ { }, {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdDemoPath"
        }, {
          "$ref" : "#/components/parameters/AccessKeyValueParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProvenanceEntityObjectSchema"
                }
              }
            }
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      },
      "put" : {
        "summary" : "Set Network Provenance",
        "description" : "- Updates the Provenance aspect of the network specified by **networkid** to be the *ProvenanceEntity* object of the PUT data.  \n- The *ProvenanceEntity* object is intended to represent the current state and history of the network and to contain a tree structure of *ProvenanceEvent* and *ProvenanceEntity* objects that describe the provenance history.\n- Refer to the document [NDEx Provenance History](http://www.home.ndexbio.org/network-provenance-history/) for a detailed desciption of this structure and best practices for its use.\n- Errors if:\n  - the authenticated user does not have ADMIN permission to the specified network\n  - the **networkid** does not correspond to an existing network\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdPath"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProvenanceEntityObjectSchema"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/network/{networkid}/sample" : {
      "get" : {
        "summary" : "Get Network Sample",
        "description" : "- Returns a sample subnetwork of the network specified by **networkid**.\n- The default sample network is created based on an arbitrary selection of 500 edges, created by the NDEx server for networks larger than 500 edges. \n- Alternatively, if a sample network has been explicitedly stored using **setNetworkSample** request, that sample network will be returned.\n- Returns *ObjectNotFound* exception when:\n  - no sample file was found\n  - network specified by **networkid** has 500 or fewer edges\n  - the sample network is not yet generated by the server at the time of the request.\n  - the sample network has been set to null by the network owner.\n- Errors if:\n  - the authenticated user making the request does not have WRITE or ADMIN permissions to the specified network\n  - the **networkid** does not correspond to an existing network\n",
        "security" : [ { }, {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdPath"
        }, {
          "$ref" : "#/components/parameters/AccessKeyValueParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CX_NetworkStreamSchema"
                }
              }
            }
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      },
      "put" : {
        "summary" : "Set Sample Network",
        "description" : "- Sets the example network for the network specified by **networkid**.  The sample network is specified by the CX data in the request body. \n- Errors if:\n  - the authenticated user does not have ADMIN permissions to the specified network\n  - the **networkid** does not correspond to an existing network\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdPath"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CX_NetworkStreamSchema"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/404-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/network/{networkid}/summary" : {
      "get" : {
        "summary" : "Get a Network Summary",
        "description" : "- Retrieves a NetworkSummary JSON object based on the network specified by **networkId**. \n- A NetworkSummary object is a subset of a network object.  It is used to convey basic information about a network in this API.\n- Error occurs if the network is not found or the authenticated user does not have read permission for the network.\n- Anonymous users can only access networks with PUBLIC visibility.\n",
        "security" : [ { }, {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdDemoPath"
        }, {
          "$ref" : "#/components/parameters/AccessKeyValueParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NetworkSummaryObjectSchema"
                }
              }
            }
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      },
      "put" : {
        "summary" : "Update Network Profile and Properties",
        "description" : "- The JSON request body contains key/value pairs that overwrite the corresponding properties of a given network.\n- at this time, only the following properties of a network can be updated:\n  - `name` \n  - `description`\n  - `version`\n  - `visibility` \n  - and `properties`\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdPath"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "description" : "Network properties to update",
                "properties" : {
                  "name" : {
                    "type" : "string"
                  },
                  "description" : {
                    "type" : "string"
                  },
                  "version" : {
                    "type" : "string"
                  },
                  "visibility" : {
                    "type" : "string"
                  },
                  "properties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/NetworkPropertiesObjectSchema"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/network/{networkid}/systemproperty" : {
      "put" : {
        "summary" : "Set Network System Properties",
        "description" : "- Sets the network system properties which describe the network's status in a particular NDEx server.\n- These properties are not part of the corresponding CX network object.\n- The only supported system properties at this time are:\n  - `readOnly`\n  - `visibility`\n  - `showcase`\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdPath"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "readOnly" : {
                    "type" : "boolean"
                  },
                  "visibility" : {
                    "enum" : [ "PUBLIC", "PRIVATE" ]
                  },
                  "showcase" : {
                    "type" : "boolean"
                  }
                },
                "example" : {
                  "readOnly" : true,
                  "visibility" : "PUBLIC",
                  "showcase" : true
                }
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/networkset" : {
      "post" : {
        "summary" : "Create a Network Set",
        "description" : "- Creates a new network set.\n- A URL link associated with the newly created network set is returned in the response body upon successful completion. \n- The network set's UUID is a component of this URL and corresponds to the **networksetid** path parameter used in subsequent Get/Put/Delete network set operations.\n- Returns an error when:\n  - the `name` property is not specified\n  - the user is not authenticated.\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network Set" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NetworkSetRequestBodySchema"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "description" : "URL of newly created network set.",
                  "type" : "string",
                  "format" : "url",
                  "example" : "http://test.ndexbio.org/v2/networkset/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/networkset/{networksetid}" : {
      "get" : {
        "summary" : "Get a Network Set",
        "description" : "- Retrieves the network set specified by the **networksetid** (UUID) path parameter.\n- An optional access key query parameter allows any user to have read access to this network set regardless if that user has the READ privilege on this network.\n- When the access key query parameter is used:\n  - the access key function must be enabled in order to return a key. Refer to *Disable/enable Access Key on Network* operation under the Network tag.\n  - a status code of 204 (no content) is returned if the access key function for this network set is not enabled.\n- Returns an error when:\n  - the access key function for this network set is not enabled\n  - the network set does not exist.\n",
        "security" : [ ],
        "tags" : [ "Network Set" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkSetIdPath"
        }, {
          "$ref" : "#/components/parameters/AccessKeyValueParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NetworkSetObjectSchema"
                }
              }
            }
          },
          "204" : {
            "description" : "ERROR - Access key not enabled for this network set."
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      },
      "put" : {
        "summary" : "Update a Network Set",
        "description" : "- Updates the network set specified by the **networksetid** (UUID) path parameter.\n- Modifies the specified network set's `name` and `description` properties only.\n- Returns an error when:\n  - the `name` property is not specified\n  - the user is not the owner of the network set\n  - the network set does not exist.\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network Set" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkSetIdPath"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NetworkSetRequestBodySchema"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      },
      "delete" : {
        "summary" : "Delete a Network Set",
        "description" : "- Deletes the network set specified by the **networksetid** (UUID) path parameter.\n- Returns an error when:\n  - the user is not the owner of the nework set\n  - the network set does not exist.\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network Set" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkSetIdPath"
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/networkset/{networksetid}/members" : {
      "post" : {
        "summary" : "Add Networks to Network Set",
        "description" : "- Adds networks to a network set.\n- The HTTP request body holds an array containing one or more **networksetid**'s (UUID's) that denote the networks to add.\n- An error is returned if:\n  - the network set does not exist\n  - the member to add does not exist\n  - the user is not the owner of the network set\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network Set" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkSetIdPath"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NetworkSetMembersSchema"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "$ref" : "#/components/responses/201-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      },
      "delete" : {
        "summary" : "Delete Networks from Network Set",
        "description" : "- Deletes one or more networks belonging to a network set.\n- The HTTP request body holds an array containing one or more **networkSetId**'s (UUID's) that denote the networks to delete.\n- An error is returned if:\n  - the network set does not exist\n  - the network member to delete does not exist\n  - the user is not the owner of the network set\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network Set" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkSetIdPath"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NetworkSetMembersSchema"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/networkset/{networksetid}/systemproperty" : {
      "put" : {
        "summary" : "Update Network Set System Properties",
        "description" : "- Sets the system properties for the network set specified by **networksetid** (UUID).\n- At this time, the only supported system property is `showcase`.\n- An error is returned if:\n  - the network set does not exist\n  - the user is not the owner of the network set\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Network Set" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkSetIdPath"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "showcase" : {
                    "type" : "boolean",
                    "description" : "- (Required) Controls the visibility of the network set on the owner's homepage.\n"
                  }
                },
                "required" : [ "showcase" ],
                "example" : {
                  "showcase" : true
                }
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/search/group" : {
      "post" : {
        "summary" : "Search Groups",
        "description" : "- Returns an array of Group objects, and returns the total number of objects found that meet the search criterion.\n- The search criterion is found in the request body's `searchString` property.\n- Wildcard characters are valid in `searchString`.\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Search" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/StartParam"
        }, {
          "$ref" : "#/components/parameters/SizeParam"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SearchStringPropertySchema"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "SearchResult object",
                  "properties" : {
                    "resultList" : {
                      "type" : "array",
                      "description" : "List of Group objects",
                      "items" : {
                        "$ref" : "#/components/schemas/GroupObjectSchema"
                      }
                    },
                    "numFound" : {
                      "type" : "number",
                      "description" : "number of Group objects meeting search criterion"
                    },
                    "start" : {
                      "type" : "number",
                      "description" : "index to first Group object returned relative to numFound"
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/search/network" : {
      "post" : {
        "summary" : "Search Networks",
        "description" : "- Returns an array of NetworkSummary objects, and returns the total number of objects found that meet the search criterion.\n- The search criterion is found in the request body's `searchString` property.\n- Wildcard characters are valid in `searchString`.\n- The search can be constrained using these optional properties:\n    - `permission` - filter by READ / WRITE network permission\n    - `includeGroups` - filter by user's group permission\n    - `accountName` - filter by network owner\n",
        "security" : [ { }, {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Search" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/StartParam"
        }, {
          "$ref" : "#/components/parameters/SizeParam"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "searchString" : {
                    "type" : "string",
                    "description" : "- (Required) Search query text\n"
                  },
                  "permission" : {
                    "type" : "string",
                    "description" : "- (Optional) Use if there is to be filtering based on permission. When provided, it must be specified as either *READ* or *WRITE* only.\n- **WRITE** - the search will only return networks for which the authenticated user has **edit** or **admin** permission.\n- **READ** - the search will only return networks for which the authenticated user has edit, admin, or read permission.  Note that this only includes networks that are readable to explicit permission, and NOT networks that are readable because they have been made public.\n"
                  },
                  "includeGroups" : {
                    "type" : "boolean",
                    "description" : "- (Optional) Defaults to false.\n- If set to true, the search will also return networks based on permissions from the authenticated user's group memberships.\n- This enables the search to return a network where a group has permission to access the network and the user is a member of the group.\n",
                    "default" : false
                  },
                  "accountName" : {
                    "type" : "string",
                    "description" : "- (Optional) If provided, the search will be constrained to networks owned by the specified account.\n"
                  }
                },
                "required" : [ "searchString" ],
                "example" : {
                  "searchString" : ""
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "SearchResult object",
                  "properties" : {
                    "numFound" : {
                      "type" : "number",
                      "description" : "number of NetworkSummary objects meeting search criterion"
                    },
                    "start" : {
                      "type" : "number",
                      "description" : "index to first NetworkSummary object returned relative to numFound"
                    },
                    "networks" : {
                      "type" : "array",
                      "description" : "List of NetworkSummary objects",
                      "items" : {
                        "$ref" : "#/components/schemas/NetworkSummaryObjectSchema"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/search/network/genes" : {
      "post" : {
        "summary" : "Search Networks by Gene/Protein",
        "description" : "- Returns an array of Network Summary objects, and returns the total number of objects found that meet the search criterion.\n- The `searchString` property contains the search query text. Wildcard characters permitted.\n",
        "security" : [ { }, {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Search" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/StartParam"
        }, {
          "$ref" : "#/components/parameters/SizeParam"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SearchStringPropertySchema"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "SearchResult object",
                  "properties" : {
                    "numFound" : {
                      "type" : "number",
                      "description" : "number of NetworkSummary objects meeting search criterion"
                    },
                    "start" : {
                      "type" : "number",
                      "description" : "index to first NetworkSummary object relative to numFound"
                    },
                    "networks" : {
                      "type" : "array",
                      "description" : "List of NetworkSummary objects",
                      "items" : {
                        "$ref" : "#/components/schemas/NetworkSummaryObjectSchema"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/search/network/{networkid}/advancedquery" : {
      "post" : {
        "summary" : "Advanced Query",
        "description" : "- Description:\n  - A filtered subnetwork of the network specified by **networkId** is returned.\n  - The returned subnetwork contains edges which satisfy both the edgeFilter and nodeFilter properties up to a specified limit.\n  - The subnetwork is returned as a Network object containing the selected edges plus all other network elements relevant to the edges.\n- The returned subnetwork is found by a traversal of the network starting with nodes associated with the following properties:\n  - `edgeFilter`\n  - `nodeFilter`\n  - `edgeLimit`\n- All matches of node or edge properties vs. propertySpecifications are case insensitive.\n- The query is only valid if at least one of the above mentioned filter properties is not null and non-empty.\n- An error is returned if both the `nodeFilter` and `edgeFilter` properties are nulls or have no property specifications.\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Search" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdPath"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "edgeFilter" : {
                    "type" : "object",
                    "properties" : {
                      "propertySpecifications" : {
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "name" : {
                              "type" : "string"
                            },
                            "value" : {
                              "type" : "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "nodeFilter" : {
                    "type" : "object",
                    "properties" : {
                      "propertySpecifications" : {
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "name" : {
                              "type" : "string"
                            },
                            "value" : {
                              "type" : "string"
                            }
                          }
                        }
                      },
                      "mode" : {
                        "type" : "string"
                      }
                    }
                  },
                  "edgeLimit" : {
                    "type" : "integer",
                    "description" : "- (Optional) Sets the maximum number of edges that this query can return.\n- When set to 0 or a negative integer there is no limit, i.e. all edges that satisfy the query criteria are returned.\n"
                  },
                  "queryName" : {
                    "type" : "string",
                    "description" : "- Identifies the query by name.\n"
                  }
                },
                "required" : [ "edgeFilter nodeFilter" ]
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CX_NetworkStreamSchema"
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/search/network/{networkid}/interconnectquery" : {
      "post" : {
        "summary" : "Interconnect Query",
        "description" : "- Returns a CX Network that is a neighborhood subnetwork where all the paths must start or end at one of the query nodes in the network specified by **networkid**.\n- The query finds the subnetwork by a traversal of the network starting with nodes associated with the following properties:\n  - `searchString`\n  - `edgeLimit`\n  - `errorWhenLimitIsOver`\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Search" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdDemoPath"
        }, {
          "in" : "query",
          "name" : "save",
          "description" : "Only an authenticated user can call this function with this parameter set to true. When save=true, the server will save the query result as a network in the callerâs account and return the URL of the network resource to the user. Saving query result as a network is a asynchronous call, which means the server will return the URL of the network resource (with HTTP return code 201) while the server is still running the query. User can use the returned UUID to check the status of the network creation process. The default value is false.",
          "schema" : {
            "type" : "string",
            "enum" : [ "false", "true" ],
            "default" : false
          },
          "required" : false
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "description" : "The example values used are for demonstration purposes. They can be replaced, as needed.",
                "properties" : {
                  "searchString" : {
                    "type" : "string",
                    "description" : "- (Required) A whitespace delimited string of search terms which are matched against\n  1. the controlled vocabulary terms used in the network\n  2. node names in the network\n- A set of initial nodes is selected based on association with matched terms or simple name match.\n- The query selects edges based on traversal from those initial nodes.\n"
                  },
                  "edgeLimit" : {
                    "type" : "number",
                    "description" : "- (Optional) Sets the maximum number of edges that this query can return.\n  A negative or zero value means no limit in the query.\n",
                    "default" : 0
                  },
                  "errorWhenLimitIsOver" : {
                    "type" : "boolean",
                    "description" : "- (Optional) If this value is true the server stops streaming the network when it hits the edgeLimit, and add success: false and \n  error: \"EdgeLimitExceeded\" in the status aspect and close the CX stream. \n- If this value is false, the server returns a subnetwork with edge count up to edgeLimit. The status aspect will be a success, and a network attribute \"EdgeLimitExceeded\": \"true\" will be added to the returned network only if the server hits the edgeLimit. The default value is true.\n",
                    "default" : true
                  }
                },
                "required" : [ "searchString" ],
                "example" : {
                  "searchString" : "erk* braf",
                  "edgeLimit" : 0,
                  "errorWhenLimitIsOver" : true
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "CX_Network object",
                      "items" : {
                        "$ref" : "#/components/schemas/CX_NetworkObjectSchema"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/search/network/{networkid}/query" : {
      "post" : {
        "summary" : "Query Network",
        "description" : "- Returns a CX Network that is a neighborhood subnetwork of the network specified by **networkid**.\n- The query finds the subnetwork by a traversal of the network starting with nodes associated with the following properties:\n  - `searchString`\n  - `searchDepth`\n  - `edgeLimit`\n  - `errorWhenLimitIsOver`\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Search" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/NetworkIdDemoPath"
        }, {
          "in" : "query",
          "name" : "save",
          "description" : "Only an authenticated user can call this function with this parameter set to true. When save=true, the server will save the query result as a network in the callerâs account and return the URL of the network resource to the user. Saving query result as a network is a asynchronous call, which means the server will return the URL of the network resource (with HTTP return code 201) while the server is still running the query. User can use the returned UUID to check the status of the network creation process. The default value is false.",
          "schema" : {
            "type" : "string",
            "enum" : [ "false", "true" ],
            "default" : false
          },
          "required" : false
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "description" : "The example values used are for demonstration purposes. They can be replaced, as needed.",
                "properties" : {
                  "searchString" : {
                    "type" : "string",
                    "description" : "- (Required) A whitespace delimited string of search terms which are matched against\n  1. the controlled vocabulary terms used in the network\n  2. node names in the network\n- A set of initial nodes is selected based on association with matched terms or simple name match.\n- The query selects edges based on traversal from those initial nodes.\n"
                  },
                  "searchDepth" : {
                    "type" : "number",
                    "description" : "- (Optional) Sets the maximum number of traversal steps from the initial node.\n",
                    "minimum" : 1,
                    "maximum" : 3
                  },
                  "edgeLimit" : {
                    "type" : "number",
                    "description" : "- (Optional) Sets the maximum number of edges that this query can return.\n  A negative or zero value means no limit in the query.\n",
                    "default" : 0
                  },
                  "errorWhenLimitIsOver" : {
                    "type" : "boolean",
                    "description" : "- (Optional) If this value is true the server stops streaming the network when it hits the edgeLimit, and add success: false and \n  error: \"EdgeLimitExceeded\" in the status aspect and close the CX stream. \n- If this value is set to false, the server returns a subnetwork with edge count up to edgeLimit. The status aspect will be a success, and a network attribute \"EdgeLimitExceeded\": \"true\" will be added to the returned network only if the server hits the edgeLimit. The default value is true.\n",
                    "default" : true
                  }
                },
                "required" : [ "searchString" ],
                "example" : {
                  "searchString" : "erk*",
                  "searchDepth" : 1,
                  "edgeLimit" : 0,
                  "errorWhenLimitIsOver" : true
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "CX_Network object",
                      "items" : {
                        "$ref" : "#/components/schemas/CX_NetworkObjectSchema"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/search/user" : {
      "post" : {
        "summary" : "Search Users",
        "description" : "- Returns an array of User objects, and returns the total number of objects found that meet the search criterion.\n- The search criterion is found in the request body's `searchString` property.\n- Wildcard characters are valid in `searchString`.\n",
        "security" : [ { }, {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Search" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/StartParam"
        }, {
          "$ref" : "#/components/parameters/SizeParam"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SearchStringPropertySchema"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "SearchResult object",
                  "properties" : {
                    "resultList" : {
                      "type" : "array",
                      "description" : "List of User objects",
                      "items" : {
                        "$ref" : "#/components/schemas/UserObjectSchema"
                      }
                    },
                    "numFound" : {
                      "type" : "number",
                      "description" : "number of User objects meeting search criterion"
                    },
                    "start" : {
                      "type" : "number",
                      "description" : "index to first User object returned relative to numFound"
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/task" : {
      "get" : {
        "summary" : "Get User's Tasks",
        "description" : "- Returns a JSON array of *Task* objects owned by the authenticated user with the specified status.\n- The array is ordered by task creation time.\n- If the status query parameter is not specified, all tasks owned by this user will be returned.\n- An error is returned if:\n  - the task does not exist\n  - the authenticated user does not own the specified task\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Task" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "status",
          "description" : "Current state of the task workflow.",
          "schema" : {
            "type" : "string",
            "enum" : [ "COMPLETED", "PROCESSING", "QUEUED", "FAILED" ]
          },
          "required" : false,
          "allowEmptyValue" : false
        }, {
          "$ref" : "#/components/parameters/StartParam"
        }, {
          "$ref" : "#/components/parameters/SizeParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TaskObjectSchema"
                  }
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/task/{taskid}" : {
      "get" : {
        "summary" : "Get a Task by Task UUID",
        "description" : "- Returns the *Task* object associated with the **taskid** path parameter.\n- An error is returned if:\n  - the task does not exist\n  - the authenticated user does not own the specified task\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Task" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/TaskIdPath"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskObjectSchema"
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      },
      "delete" : {
        "summary" : "Delete a Task",
        "description" : "- Deletes the task associated with the **taskid** path parameter. \n- An error is returned if:\n  - the task does not exist\n  - the authenticated user does not own the specified task\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Task" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/TaskIdPath"
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/204-response"
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/task/{taskid}/file" : {
      "get" : {
        "summary" : "Download Exported File by Task UUID",
        "description" : "- Returns the file exported by the task specified in the **taskid** path parameter.\n- An error is returned if:\n  - the task does not exist\n  - the authenticated user does not own the specified task\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "Task" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/TaskIdPath"
        }, {
          "in" : "query",
          "name" : "download",
          "schema" : {
            "type" : "string",
            "enum" : [ "true" ]
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            },
            "headers" : {
              "Access-Control-Expose-Headers" : {
                "schema" : {
                  "type" : "string",
                  "default" : "Content-Description"
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "404" : {
            "$ref" : "#/components/responses/404-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/user/{userid}/membership" : {
      "get" : {
        "summary" : "Get User's Group Memberships",
        "description" : "Option 1 - Using the **groupId=** query parameter:\n- Returns the permission that the user specified by the **userid* path parameter has on that group.\n- An empty object is returned if the authenticated user is not a member of the group.\n---\nOption 2 - Using **type=**, **start=** and **size=** query parameters:\n- Returns those groups for which the authenticated user has the specified membership type.\n- The **type** query parameter contains the membership types upon which to filter.  If it is omitted, all membership types will be returned.\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "User" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/UserIdPath"
        }, {
          "in" : "query",
          "name" : "groupid",
          "description" : "(Option 1 only) The Group object UUID",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          },
          "required" : false
        }, {
          "in" : "query",
          "name" : "type",
          "description" : "(Option 2 only) The Group object UUID",
          "schema" : {
            "type" : "string"
          },
          "required" : false
        }, {
          "in" : "query",
          "name" : "start",
          "description" : "(Option 2 only) Index to first object to return",
          "schema" : {
            "type" : "number",
            "default" : 100
          },
          "required" : false
        }, {
          "in" : "query",
          "name" : "size",
          "description" : "(Option 2 only) Number of objects to return",
          "schema" : {
            "type" : "number",
            "default" : 100
          },
          "required" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "Object containing key/value pairs representing group UUIDs and their corresponding membership type value of the user.",
                  "example" : {
                    "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" : "MEMBER"
                  }
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/user/{userid}/networksets" : {
      "get" : {
        "summary" : "Get All Network Sets Owned by a User",
        "description" : "- Returns a list of *Network Set* objects owned by the user identified in the **userid** path parameter.\n",
        "security" : [ ],
        "tags" : [ "User" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/UserIdPath"
        }, {
          "$ref" : "#/components/parameters/OffsetParam"
        }, {
          "$ref" : "#/components/parameters/LimitParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "description" : "List of Network Set objects",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkSetObjectSchema"
                  }
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/user/{userid}/networksummary" : {
      "get" : {
        "summary" : "Get User's Account Page Networks",
        "description" : "- Returns a list of *NetworkSummary* objects of which:\n  - the user owns\n  - the networks are shared with the user directly\n- **Userid** path parameter must be an authenticated user's UUID\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "User" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/UserIdPath"
        }, {
          "$ref" : "#/components/parameters/OffsetParam"
        }, {
          "$ref" : "#/components/parameters/LimitParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "description" : "List of NetworkSummary objects",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkSummaryObjectSchema"
                  }
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    },
    "/user/{userid}/permission" : {
      "get" : {
        "summary" : "Get User's Permission for Networks",
        "description" : "- Returns the permissions assigned to the authenticated user for the specified **networkId**.\n- Maps the **networkId** UUID to the highest permission assigned to the authenticated user.\n- If the **directonly=** query parameter is set to true, permissions granted through groups are not included in the result. The default value is false.\n",
        "security" : [ {
          "BASIC_AUTH" : [ ]
        } ],
        "tags" : [ "User" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/UserIdPath"
        }, {
          "in" : "query",
          "name" : "networkId",
          "schema" : {
            "type" : "string"
          },
          "example" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "required" : true
        }, {
          "in" : "query",
          "name" : "directonly",
          "schema" : {
            "type" : "string",
            "enum" : [ "false", "true" ]
          },
          "required" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK: Operation successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "Object containing key/value pairs representing network UUIDs and their respective permission values.",
                  "example" : {
                    "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" : "ADMIN"
                  }
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/401-response"
          },
          "500" : {
            "$ref" : "#/components/responses/500-response"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AdminStatusStandardSchema" : {
        "type" : "object",
        "description" : "Response payload when status=standard",
        "properties" : {
          "networkCount" : {
            "type" : "number"
          },
          "userCount" : {
            "type" : "number"
          },
          "groupCount" : {
            "type" : "number"
          },
          "properties" : {
            "type" : "object",
            "properties" : {
              "ServerVersion" : {
                "type" : "string"
              },
              "Build" : {
                "type" : "string"
              },
              "ServerResultLimit" : {
                "type" : "string"
              }
            }
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "AdminStatusFullSchema" : {
        "type" : "object",
        "description" : "Response payload when status=full",
        "properties" : {
          "networkCount" : {
            "type" : "number"
          },
          "userCount" : {
            "type" : "number"
          },
          "groupCount" : {
            "type" : "number"
          },
          "properties" : {
            "type" : "object",
            "properties" : {
              "ServerVersion" : {
                "type" : "string"
              },
              "Build" : {
                "type" : "string"
              },
              "ServerResultLimit" : {
                "type" : "string"
              },
              "ImportersExporters" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "importer" : {
                      "type" : "boolean"
                    },
                    "exporter" : {
                      "type" : "boolean"
                    },
                    "fileExtension" : {
                      "type" : "string"
                    },
                    "name" : {
                      "type" : "string"
                    },
                    "description" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "AspectFragmentCxAspectsSchema" : {
        "type" : "object",
        "description" : "Contains attributes that describe the state of the network when it was last stored in NDEx. IT IS NOT THE SAME AS THE STATUS ASPECT.",
        "properties" : {
          "externalId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modificationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "visibility" : {
            "type" : "string",
            "enum" : [ "PUBLIC", "PRIVATE" ]
          },
          "published" : {
            "type" : "boolean"
          },
          "nodeCount" : {
            "type" : "number"
          },
          "edgeCount" : {
            "type" : "number"
          },
          "owner" : {
            "type" : "string"
          },
          "nextServerURI" : {
            "type" : "string"
          },
          "readOnly" : {
            "type" : "boolean"
          }
        }
      },
      "AspectFragmentEdgeAttributesSchema" : {
        "type" : "object",
        "description" : "Edge Attributes Aspect object",
        "properties" : {
          "po" : {
            "type" : "string"
          },
          "n" : {
            "type" : "string"
          },
          "v" : {
            "type" : "string"
          },
          "d" : {
            "type" : "string"
          }
        }
      },
      "AspectFragmentEdgesSchema" : {
        "type" : "object",
        "description" : "Edges Aspect object",
        "properties" : {
          "@id" : {
            "type" : "string"
          },
          "s" : {
            "type" : "string"
          },
          "t" : {
            "type" : "string"
          },
          "i" : {
            "type" : "string"
          }
        }
      },
      "AspectFragmentNetworkAttributesSchema" : {
        "type" : "object",
        "description" : "Network Attributes Aspect object",
        "properties" : {
          "n" : {
            "type" : "string"
          },
          "v" : {
            "type" : "string"
          }
        }
      },
      "AspectFragmentNodesSchema" : {
        "type" : "object",
        "description" : "Nodes Aspect object",
        "properties" : {
          "@id" : {
            "type" : "string"
          },
          "n" : {
            "type" : "string"
          }
        }
      },
      "AspectMetadataSchema" : {
        "type" : "object",
        "description" : "Metadata Aspect object",
        "properties" : {
          "consistencyGroup" : {
            "type" : "number",
            "description" : "An integer identifier shared by aspects to indicate that they are mutually consistent."
          },
          "elementCount" : {
            "type" : "number",
            "description" : "number of elements in this aspect"
          },
          "idCounter" : {
            "type" : "number",
            "description" : "Required if the aspect exports IDs for its aspect elements. It        denotes the highest ID represented in the aspect or any of the aspect's     previous versions"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "name" : {
            "type" : "string",
            "description" : "name of the aspect"
          },
          "properties" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "description" : "An aspect-defined property list of name-value pairs"
            }
          },
          "version" : {
            "type" : "string",
            "description" : "required in pre-metadata"
          }
        },
        "required" : [ "name", "consistencyGroup", "properties" ]
      },
      "CX_NetworkObjectSchema" : {
        "type" : "object",
        "description" : "CX Aspect object",
        "properties" : {
          "numberVerification" : {
            "type" : "array",
            "description" : "Numeric range precondition element",
            "items" : {
              "type" : "object",
              "properties" : {
                "longNumber" : {
                  "type" : "number",
                  "default" : 281474976710655
                }
              }
            }
          },
          "metaData" : {
            "type" : "array",
            "description" : "Array of Metadata Aspect objects",
            "items" : {
              "$ref" : "#/components/schemas/AspectMetadataSchema"
            }
          },
          "networkAttributes" : {
            "type" : "array",
            "description" : "List of aspect network attributes objects",
            "items" : {
              "$ref" : "#/components/schemas/AspectFragmentNetworkAttributesSchema"
            }
          },
          "nodes" : {
            "type" : "array",
            "description" : "List of aspect node objects",
            "items" : {
              "$ref" : "#/components/schemas/AspectFragmentNodesSchema"
            }
          },
          "edges" : {
            "type" : "array",
            "description" : "List of aspect edge objects",
            "items" : {
              "$ref" : "#/components/schemas/AspectFragmentEdgesSchema"
            }
          },
          "edgeAttributes" : {
            "type" : "array",
            "description" : "List of aspect edge attribute objects",
            "items" : {
              "$ref" : "#/components/schemas/AspectFragmentEdgeAttributesSchema"
            }
          },
          "ndexStatus" : {
            "$ref" : "#/components/schemas/AspectFragmentCxAspectsSchema"
          },
          "status" : {
            "type" : "array",
            "description" : "A complete CX stream ends with a status aspect object.",
            "items" : {
              "type" : "object",
              "properties" : {
                "error" : {
                  "type" : "string",
                  "description" : "Holds the error message if an error occured when generating the CX document."
                },
                "success" : {
                  "type" : "boolean",
                  "description" : "Set to true if the CX document is successfully generated by the source."
                }
              }
            }
          }
        },
        "required" : [ "numberVerification", "status" ]
      },
      "CX_NetworkStreamSchema" : {
        "type" : "array",
        "description" : "An array containing CX Aspect objects. For details, refer to the [NDEx Network CX Format Data Model](http://www.home.ndexbio.org/data-model/) document.\n",
        "items" : {
          "$ref" : "#/components/schemas/CX_NetworkObjectSchema"
        }
      },
      "ErrorResponseSchema" : {
        "type" : "object",
        "description" : "Error details",
        "properties" : {
          "errorCode" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "nullable" : true,
            "default" : null
          },
          "stackTrace" : {
            "type" : "string"
          },
          "threadId" : {
            "type" : "string"
          },
          "timeStamp" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "GroupObjectSchema" : {
        "type" : "object",
        "description" : "Group object",
        "properties" : {
          "properties" : {
            "type" : "object"
          },
          "groupName" : {
            "type" : "string"
          },
          "image" : {
            "type" : "string",
            "format" : "url",
            "nullable" : true,
            "default" : null
          },
          "website" : {
            "type" : "string",
            "format" : "url",
            "nullable" : true,
            "default" : null
          },
          "description" : {
            "type" : "string",
            "nullable" : true,
            "default" : null
          },
          "externalId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "isDeleted" : {
            "type" : "boolean",
            "default" : false
          },
          "modificationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "NetworkPropertiesObjectSchema" : {
        "type" : "object",
        "properties" : {
          "subNetworkId" : {
            "description" : "This object's UUID",
            "type" : "string",
            "format" : "uuid"
          },
          "predicateString" : {
            "type" : "string"
          },
          "dataType" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "NetworkSummaryObjectSchema" : {
        "type" : "object",
        "properties" : {
          "ownerUUID" : {
            "type" : "string",
            "format" : "uuid"
          },
          "isReadOnly" : {
            "type" : "boolean",
            "default" : false
          },
          "subnetworkIds" : {
            "type" : "array",
            "description" : "List of subnetwork ids.",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          },
          "errorMessage" : {
            "type" : "string",
            "nullable" : true,
            "default" : null
          },
          "isValid" : {
            "type" : "boolean"
          },
          "warnings" : {
            "type" : "array",
            "description" : "List of warnings.",
            "items" : {
              "type" : "string"
            }
          },
          "isShowcase" : {
            "type" : "boolean",
            "default" : false
          },
          "doi" : {
            "description" : "Digital Object Identifier (DOI)",
            "type" : "string",
            "nullable" : true,
            "default" : null
          },
          "isCertified" : {
            "type" : "boolean",
            "default" : false
          },
          "visibility" : {
            "type" : "string",
            "enum" : [ "PUBLIC", "PRIVATE" ]
          },
          "indexed" : {
            "type" : "boolean"
          },
          "completed" : {
            "type" : "boolean"
          },
          "edgeCount" : {
            "type" : "number"
          },
          "nodeCount" : {
            "type" : "number"
          },
          "version" : {
            "type" : "string"
          },
          "uri" : {
            "type" : "string",
            "nullable" : true
          },
          "owner" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "array",
            "description" : "List of Network Properties objects",
            "items" : {
              "$ref" : "#/components/schemas/NetworkPropertiesObjectSchema"
            }
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "externalId" : {
            "description" : "This object's UUID",
            "type" : "string",
            "format" : "uuid"
          },
          "isDeleted" : {
            "type" : "boolean",
            "default" : false
          },
          "modificationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "NetworkSetObjectSchema" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "description" : "Description field",
            "type" : "string"
          },
          "ownerId" : {
            "description" : "Owner's UUID",
            "type" : "string",
            "format" : "uuid"
          },
          "networks" : {
            "type" : "array",
            "description" : "List of Network object UUIDs",
            "items" : {
              "description" : "network set",
              "type" : "string",
              "format" : "uuid"
            }
          },
          "showcased" : {
            "type" : "boolean",
            "default" : false
          },
          "doi" : {
            "description" : "Digital Object Identifier (DOI)",
            "type" : "string",
            "nullable" : true
          },
          "properties" : {
            "type" : "object",
            "properties" : {
              "reference" : {
                "description" : "Reference field",
                "type" : "string"
              }
            }
          },
          "externalId" : {
            "description" : "This object's UUID",
            "type" : "string",
            "format" : "uuid"
          },
          "isDeleted" : {
            "type" : "boolean",
            "default" : false
          },
          "modificationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "NetworkSetMembersSchema" : {
        "type" : "array",
        "description" : "List of networks belonging to this network set",
        "items" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "Network object UUID",
          "example" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "NetworkSetRequestBodySchema" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "- (Required) A short name for the network set.  Names are not unique across all users, but they should be unique within a user.\n"
          },
          "description" : {
            "type" : "string",
            "description" : "- (Optional) An abstract or summary about this network set.\n"
          }
        },
        "required" : [ "name" ],
        "example" : {
          "name" : "Name of this network set",
          "description" : "A summary of what this network set is about."
        }
      },
      "ProvenanceEntityObjectSchema" : {
        "type" : "object",
        "description" : "Providence entity object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "format" : "url"
          },
          "creationEvent" : {
            "$ref" : "#/components/schemas/ProvenanceEventObjectSchema"
          },
          "properties" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "ProvenanceEventObjectSchema" : {
        "type" : "object",
        "properties" : {
          "endingAtTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "startingAtTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "input" : {
            "type" : "array",
            "description" : "List of ProvenanceEntity objects.",
            "items" : {
              "type" : "object"
            }
          },
          "properties" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "SearchStringPropertySchema" : {
        "type" : "object",
        "description" : "A JSON object within the HTTP request body which specifies the what is to be searched.",
        "properties" : {
          "searchString" : {
            "type" : "string",
            "description" : "Text used for the search. It can include wildcards."
          }
        },
        "required" : [ "searchString" ],
        "example" : {
          "searchString" : ""
        }
      },
      "TaskObjectSchema" : {
        "type" : "object",
        "description" : "Task object",
        "properties" : {
          "externalId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modificationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "attributes" : {
            "type" : "object"
          },
          "format" : {
            "type" : "string",
            "description" : "format of the exported file if this is a network export task"
          },
          "description" : {
            "type" : "string"
          },
          "taskType" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "taskOwnerId" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "resource" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "uuid of the resource which this task operates on"
          },
          "startTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "finishTime" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "UserObjectSchema" : {
        "type" : "object",
        "description" : "User object",
        "properties" : {
          "properties" : {
            "type" : "object"
          },
          "displayName" : {
            "type" : "string",
            "nullable" : true,
            "default" : null
          },
          "isIndividual" : {
            "type" : "boolean"
          },
          "userName" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string",
            "format" : "password",
            "nullable" : true,
            "default" : null
          },
          "isVerified" : {
            "type" : "boolean"
          },
          "emailAddress" : {
            "type" : "string",
            "format" : "email"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "diskQuota" : {
            "type" : "number",
            "nullable" : true,
            "default" : null
          },
          "diskUsed" : {
            "type" : "number",
            "nullable" : true,
            "default" : null
          },
          "image" : {
            "type" : "string",
            "format" : "url",
            "nullable" : true,
            "default" : null
          },
          "website" : {
            "type" : "string",
            "format" : "url",
            "nullable" : true,
            "default" : null
          },
          "description" : {
            "type" : "string",
            "nullable" : true,
            "default" : null
          },
          "externalId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "isDeleted" : {
            "type" : "boolean",
            "default" : false
          },
          "modificationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      }
    },
    "parameters" : {
      "AccessKeyParam" : {
        "in" : "query",
        "name" : "action",
        "description" : "Used to denote whether to disable or enable the access key function.\n",
        "required" : true,
        "schema" : {
          "type" : "string",
          "enum" : [ "enable", "disable" ],
          "default" : "enable"
        }
      },
      "AccessKeyValueParam" : {
        "in" : "query",
        "name" : "accesskey",
        "description" : "(Optional) The access key UUID\n",
        "required" : false,
        "schema" : {
          "type" : "string",
          "format" : "uuid"
        }
      },
      "AspectNamePath" : {
        "in" : "path",
        "name" : "aspectName",
        "description" : "",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "example" : ""
      },
      "AspectNameDemoPath" : {
        "in" : "path",
        "name" : "aspectName",
        "description" : "An example aspect name is entered below for demonstration purposes.  It can be replaced with another aspect name, as needed. Examples include 'cartesianCoordinates', 'nodes', 'edges', and 'edgeAttributes'.",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "example" : "cyVisualProperties"
      },
      "BlockSizePath" : {
        "in" : "path",
        "name" : "blockSize",
        "description" : "Maximum number of blocks to retrieve in the query.",
        "schema" : {
          "type" : "number"
        },
        "required" : true,
        "example" : 100
      },
      "GroupIdPath" : {
        "in" : "path",
        "name" : "groupid",
        "description" : "The Group object UUID",
        "schema" : {
          "type" : "string",
          "format" : "uuid"
        },
        "required" : true,
        "example" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
      },
      "GroupMembershipTypeParam" : {
        "in" : "query",
        "name" : "type",
        "schema" : {
          "type" : "string",
          "enum" : [ "GROUPADMIN", "MEMBER" ]
        },
        "required" : true
      },
      "LimitParam" : {
        "in" : "query",
        "name" : "limit",
        "description" : "Number of elements to retrieve in the query.",
        "schema" : {
          "type" : "number"
        },
        "required" : false
      },
      "NetworkIdPath" : {
        "in" : "path",
        "name" : "networkid",
        "description" : "A unique identifier (UUID) given to the network element when it is created.",
        "schema" : {
          "type" : "string",
          "format" : "uuid"
        },
        "required" : true,
        "example" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
      },
      "NetworkIdDemoPath" : {
        "in" : "path",
        "name" : "networkid",
        "description" : "A unique identifier (UUID) given to the network acted upon, in the form xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx. An example network UUID is entered below for demonstration purposes. It can be replaced with another network UUID, as needed.",
        "schema" : {
          "type" : "string",
          "format" : "uuid"
        },
        "required" : true,
        "example" : "cac8ec21-2d32-11e8-b939-0ac135e8bacf"
      },
      "NetworkSetIdPath" : {
        "in" : "path",
        "name" : "networksetid",
        "description" : "The network set UUID",
        "schema" : {
          "type" : "string",
          "format" : "uuid"
        },
        "required" : true,
        "example" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
      },
      "OffsetParam" : {
        "in" : "query",
        "name" : "offset",
        "description" : "Index to first object to return.  (default = 0)",
        "schema" : {
          "type" : "number",
          "default" : 0
        },
        "required" : false
      },
      "SizeParam" : {
        "in" : "query",
        "name" : "size",
        "description" : "Number of objects to return. (default = 100)",
        "schema" : {
          "type" : "number",
          "default" : 100
        },
        "required" : false
      },
      "SkipBlocksPath" : {
        "in" : "path",
        "name" : "skipBlocks",
        "description" : "number of blocks that have already been read.",
        "schema" : {
          "type" : "integer"
        },
        "required" : true,
        "example" : 0
      },
      "StartParam" : {
        "in" : "query",
        "name" : "start",
        "description" : "Index to first object to return.  (default = 0)",
        "schema" : {
          "type" : "number",
          "default" : 0
        },
        "required" : false
      },
      "TaskIdPath" : {
        "in" : "path",
        "name" : "taskid",
        "description" : "The Task object UUID",
        "schema" : {
          "type" : "string",
          "format" : "uuid"
        },
        "required" : true,
        "example" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
      },
      "UserIdParam" : {
        "in" : "query",
        "name" : "userid",
        "description" : "The User object UUID",
        "schema" : {
          "type" : "string",
          "format" : "uuid"
        },
        "required" : true,
        "example" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
      },
      "UserIdPath" : {
        "in" : "path",
        "name" : "userid",
        "description" : "The User object UUID",
        "schema" : {
          "type" : "string",
          "format" : "uuid"
        },
        "required" : true,
        "example" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
      }
    },
    "responses" : {
      "200-response" : {
        "description" : "OK: Operation successful."
      },
      "201-response" : {
        "description" : "OK: Operation successful."
      },
      "202-response" : {
        "description" : "OK: Operation successful."
      },
      "204-response" : {
        "description" : "OK: Operation successful.  (no payload content)"
      },
      "401-response" : {
        "description" : "UNAUTHORIZED: Check that you are authenticated (i.e. Signed In) and have the  credentials to access that NDEx object."
      },
      "404-response" : {
        "description" : "NOT FOUND: The object that was requested does not exist."
      },
      "500-response" : {
        "description" : "ERROR: Catch-all bucket for http status codes that denote an error occurred. Check for malformed or incorrect parameters or request body objects.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponseSchema"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "BASIC_AUTH" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}